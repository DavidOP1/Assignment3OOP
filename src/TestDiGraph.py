import unittest
from DiGraph import DiGraph
from GraphAlgo import GraphAlgo
class MyTestCase(unittest.TestCase):
    def test_get_all_v(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        nodes= {0:"0: |edges_out| 1 |edges in| 1",1:"1: |edges_out| 1 |edges in| 1",2:"2: |edges_out| 2 |edges in| 3",3:"3: |edges_out| 2 |edges in| 2",4:"4: |edges_out| 3 |edges in| 2"}
        self.assertEqual(nodes.get(0),graph.get_all_v().get(0))
        self.assertEqual(nodes.get(1), graph.get_all_v().get(1))
        self.assertEqual(nodes.get(2), graph.get_all_v().get(2))
        self.assertEqual(nodes.get(3), graph.get_all_v().get(3))
        self.assertEqual(nodes.get(4), graph.get_all_v().get(4))
    def test_v_size(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        self.assertEqual(5,graph.v_size())
        graph.remove_node(2)
        self.assertEqual(4,graph.v_size())
    def test_getNode(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        self.assertEqual(graph.getNode(2).Node.get(3).getWeight(),10)
        graph.remove_node(0)
        self.assertEqual(None,graph.getNode(0))
    def test_e_size(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        self.assertEqual(9,graph.e_size())
        graph.remove_node(0)
        self.assertEqual(7,graph.e_size())
    def test_all_in_edges_of_node(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        inNode0={4:5}
        inNode1={0:1}
        inNode2 = {1:2,4:5,3:1}
        inNode3 = {2:10,4:2}
        inNode4 = {2:4,3:4}
        self.assertEqual(inNode0,graph.all_in_edges_of_node(0))
        self.assertEqual(inNode1, graph.all_in_edges_of_node(1))
        self.assertEqual(inNode2, graph.all_in_edges_of_node(2))
        self.assertEqual(inNode3, graph.all_in_edges_of_node(3))
        self.assertEqual(inNode4, graph.all_in_edges_of_node(4))
        graph.remove_edge(3,2)
        inNode2 = {1: 2, 4: 5}
        self.assertEqual(inNode2, graph.all_in_edges_of_node(2))
    def test_all_out_edges_of_node(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        outNode0={1:1}
        outNode1={2:2}
        outNode2 = {3:10,4:4}
        outNode3 = {4:4,2:1}
        outNode4 = {3:2,0:5,2:5}
        self.assertEqual(outNode0, graph.all_out_edges_of_node(0))
        self.assertEqual(outNode1, graph.all_out_edges_of_node(1))
        self.assertEqual(outNode2, graph.all_out_edges_of_node(2))
        self.assertEqual(outNode3, graph.all_out_edges_of_node(3))
        self.assertEqual(outNode4, graph.all_out_edges_of_node(4))
        graph.remove_edge(3, 2)
        outNode3 = {4:4}
        self.assertEqual(outNode3, graph.all_out_edges_of_node(3))
    def test_remove_node(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        graph.remove_node(4)
        inNode0 = {}
        inNode1 = {0: 1}
        inNode2 = {1: 2, 3: 1}
        inNode3 = {2: 10,}
        self.assertEqual(inNode0, graph.all_in_edges_of_node(0))
        self.assertEqual(inNode1, graph.all_in_edges_of_node(1))
        self.assertEqual(inNode2, graph.all_in_edges_of_node(2))
        self.assertEqual(inNode3, graph.all_in_edges_of_node(3))

    def test_remove_edge(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        graph.remove_edge(3, 2)
        outNode3 = {4: 4}
        self.assertEqual(outNode3, graph.all_out_edges_of_node(3))

if __name__ == '__main__':
    unittest.main()
