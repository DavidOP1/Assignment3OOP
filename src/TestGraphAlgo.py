import unittest
from DiGraph import DiGraph
from GraphAlgo import GraphAlgo
class MyTestCase(unittest.TestCase):
    def test_connected(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_node(5)
        self.assertEqual(6, graph.v_size())
        graph.add_edge(0, 1, 4)
        graph.add_edge(0, 2, 11)
        graph.add_edge(1, 2, 5)
        graph.add_edge(1, 3, 13)
        graph.add_edge(2, 4, 3)
        graph.add_edge(4, 3, 11)
        graph.add_edge(3, 5, 11)
        self.assertEqual(7, graph.e_size())
        algo= GraphAlgo(graph)
        self.assertEqual(False, algo.isConnected())
    def test_center(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        algo = GraphAlgo(graph)
        self.assertEqual(4, algo.centerPoint()[0])
    def test_TSP(self):
        graph = DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_edge(0, 1, 1)
        graph.add_edge(1, 2, 2)
        graph.add_edge(2, 3, 10)
        graph.add_edge(2, 4, 4)
        graph.add_edge(3, 4, 4)
        graph.add_edge(4, 3, 2)
        graph.add_edge(4, 0, 5)
        graph.add_edge(4, 2, 5)
        graph.add_edge(3, 2, 1)
        algo=GraphAlgo(graph)
        tsp=[]
        tsp.append(2)
        tsp.append(3)
        tsp.append(4)
        route = algo.TSP(tsp);
        self.assertEqual(2, route[0][0])
        self.assertEqual(4, route[0][1])
        self.assertEqual(3, route[0][2])
        self.assertEqual(4, route[0][3])

    def testShortestPath(self):
        graph =DiGraph()
        graph.add_node(0)
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_node(5)
        self.assertEqual(6, graph.v_size())
        graph.add_edge(0, 1, 4);
        graph.add_edge(0, 2, 11)
        graph.add_edge(1, 2, 5)
        graph.add_edge(1, 3, 13)
        graph.add_edge(2, 4, 3)
        graph.add_edge(4, 3, 11)
        graph.add_edge(3, 5, 11)
        self.assertEqual(7, graph.e_size())
        algo= GraphAlgo(graph)
        route = algo.shortest_path(0, 4)
        self.assertEqual(0, route[1][0])
        self.assertEqual(1, route[1][1])
        self.assertEqual(2, route[1][2])
        self.assertEqual(4, route[1][3])
if __name__ == '__main__':
    unittest.main()
